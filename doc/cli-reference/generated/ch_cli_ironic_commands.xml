<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="ironicclient_commands">

    <!-- This file is automatically generated, do not edit -->

    <?dbhtml stop-chunking?>

    <title>Bare Metal service command-line client</title>

    <para>The <command>ironic</command> client is the command-line
        interface (CLI) for the Bare Metal service API and its extensions.

       This chapter documents <command>ironic</command> version
        <literal>1.0.0</literal>.
    </para>

    <para>For help on a specific <command>ironic</command>
       command, enter:
    </para>
    <screen><prompt>$</prompt> <userinput><command>ironic</command> <option>help</option> <replaceable>COMMAND</replaceable></userinput></screen>

    <section xml:id="ironicclient_command_usage">
       <title>ironic usage</title>
        <screen><computeroutput>usage: ironic [--insecure] [--os-cacert &lt;ca-certificate&gt;]
              [--os-cert &lt;certificate&gt;] [--os-key &lt;key&gt;] [--timeout &lt;seconds&gt;]
              [--os-user-domain-id OS_USER_DOMAIN_ID]
              [--os-user-domain-name OS_USER_DOMAIN_NAME]
              [--os-project-id OS_PROJECT_ID]
              [--os-project-name OS_PROJECT_NAME]
              [--os-project-domain-id OS_PROJECT_DOMAIN_ID]
              [--os-project-domain-name OS_PROJECT_DOMAIN_NAME] [--version]
              [--debug] [-v] [--cert-file OS_CERT] [--key-file OS_KEY]
              [--ca-file OS_CACERT] [--os-username OS_USERNAME]
              [--os-password OS_PASSWORD] [--os-tenant-id OS_TENANT_ID]
              [--os-tenant-name OS_TENANT_NAME] [--os-auth-url OS_AUTH_URL]
              [--os-region-name OS_REGION_NAME]
              [--os-auth-token OS_AUTH_TOKEN] [--ironic-url IRONIC_URL]
              [--ironic-api-version IRONIC_API_VERSION]
              [--os-service-type OS_SERVICE_TYPE] [--os-endpoint OS_ENDPOINT]
              [--os-endpoint-type OS_ENDPOINT_TYPE]
              [--max-retries MAX_RETRIES] [--retry-interval RETRY_INTERVAL]
              &lt;subcommand&gt; ...</computeroutput></screen>
  <variablelist wordsize="10">
    <title>Subcommands</title>
  <varlistentry>
    <term><command>chassis-create</command></term>
    <listitem>
      <para>
        Create a new chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>chassis-delete</command></term>
    <listitem>
      <para>
        Delete a chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>chassis-list</command></term>
    <listitem>
      <para>
        List the chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>chassis-node-list</command></term>
    <listitem>
      <para>
        List the nodes contained in a chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>chassis-show</command></term>
    <listitem>
      <para>
        Show detailed information about a chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>chassis-update</command></term>
    <listitem>
      <para>
        Update information about a chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-create</command></term>
    <listitem>
      <para>
        Register a new node with the Ironic service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-delete</command></term>
    <listitem>
      <para>
        Unregister a node from the Ironic service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-get-boot-device</command></term>
    <listitem>
      <para>
      Get the current boot device for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-get-console</command></term>
    <listitem>
      <para>
        Get the connection information for a node's console,
      if enabled.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-get-supported-boot-devices</command></term>
    <listitem>
      <para>
      Get the supported boot devices for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-get-vendor-passthru-methods</command></term>
    <listitem>
      <para>
      Get the vendor passthru methods for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-list</command></term>
    <listitem>
      <para>
        List the nodes which are registered with the Ironic
      service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-port-list</command></term>
    <listitem>
      <para>
        List the ports associated with a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-set-boot-device</command></term>
    <listitem>
      <para>
      Set the boot device for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-set-console-mode</command></term>
    <listitem>
      <para>
      Enable or disable serial console access for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-set-maintenance</command></term>
    <listitem>
      <para>
      Enable or disable maintenance mode for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-set-power-state</command></term>
    <listitem>
      <para>
      Power a node on or off or reboot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-set-provision-state</command></term>
    <listitem>
      <para>
      Initiate a provisioning state change for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-show</command></term>
    <listitem>
      <para>
        Show detailed information about a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-show-states</command></term>
    <listitem>
      <para>
        Show information about the node's states.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-update</command></term>
    <listitem>
      <para>
        Update information about a registered node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-validate</command></term>
    <listitem>
      <para>
        Validate a node's driver interfaces.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>node-vendor-passthru</command></term>
    <listitem>
      <para>
      Call a vendor-passthru extension for a node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>port-create</command></term>
    <listitem>
      <para>
        Create a new port.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>port-delete</command></term>
    <listitem>
      <para>
        Delete a port.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>port-list</command></term>
    <listitem>
      <para>
        List the ports.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>port-show</command></term>
    <listitem>
      <para>
        Show detailed information about a port.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>port-update</command></term>
    <listitem>
      <para>
        Update information about a port.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>driver-get-vendor-passthru-methods</command></term>
    <listitem>
      <para>
      Get the vendor passthru methods for a driver.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>driver-list</command></term>
    <listitem>
      <para>
        List the enabled drivers.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>driver-properties</command></term>
    <listitem>
      <para>
        Get properties of a driver.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>driver-show</command></term>
    <listitem>
      <para>
        Show information about a driver.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>driver-vendor-passthru</command></term>
    <listitem>
      <para>
      Call a vendor-passthru extension for a driver.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>bash-completion</command></term>
    <listitem>
      <para>
        Prints all of the commands and options for bash-
      completion.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>help</command></term>
    <listitem>
      <para>
        Display help about this program or one of its
      subcommands.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_command_optional">
        <title>ironic optional arguments</title>
  <variablelist wordsize="10">
  <varlistentry>
    <term><command>--insecure</command></term>
    <listitem>
      <para>
        Explicitly allow client to perform "insecure" TLS
      (https) requests. The server's certificate will not be
      verified against any certificate authorities. This
      option should be used with caution.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-cacert &lt;ca-certificate&gt;</command></term>
    <listitem>
      <para>
      Specify a CA bundle file to use in verifying a TLS
      (https) server certificate. Defaults to
      <code>env[OS_CACERT]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-cert &lt;certificate&gt;</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_CERT]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-key &lt;key&gt;</command></term>
    <listitem>
      <para>
        Defaults to <code>env[OS_KEY]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--timeout &lt;seconds&gt;</command></term>
    <listitem>
      <para>
        Set request timeout (in seconds).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-user-domain-id OS_USER_DOMAIN_ID</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_USER_DOMAIN_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-user-domain-name OS_USER_DOMAIN_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_USER_DOMAIN_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-id OS_PROJECT_ID</command></term>
    <listitem>
      <para>
      Another way to specify tenant ID. This option is
      mutually exclusive with --os-tenant-id. Defaults to
      <code>env[OS_PROJECT_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-name OS_PROJECT_NAME</command></term>
    <listitem>
      <para>
      Another way to specify tenant name. This option is
      mutually exclusive with --os-tenant-name. Defaults to
      <code>env[OS_PROJECT_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-domain-id OS_PROJECT_DOMAIN_ID</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_PROJECT_DOMAIN_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-domain-name OS_PROJECT_DOMAIN_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_PROJECT_DOMAIN_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--version</command></term>
    <listitem>
      <para>
        show program's version number and exit
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--debug</command></term>
    <listitem>
      <para>
        Defaults to <code>env[IRONICCLIENT_DEBUG]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-v, --verbose</command></term>
    <listitem>
      <para>
        Print more verbose output
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--cert-file OS_CERT</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use --os-cert.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--key-file OS_KEY</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use --os-key.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--ca-file OS_CACERT</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use --os-cacert.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-username OS_USERNAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_USERNAME]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-password OS_PASSWORD</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_PASSWORD]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-tenant-id OS_TENANT_ID</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_TENANT_ID]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-tenant-name OS_TENANT_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_TENANT_NAME]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-auth-url OS_AUTH_URL</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_AUTH_URL]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-region-name OS_REGION_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_REGION_NAME]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-auth-token OS_AUTH_TOKEN</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_AUTH_TOKEN]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--ironic-url IRONIC_URL</command></term>
    <listitem>
      <para>
      Defaults to <code>env[IRONIC_URL]</code>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--ironic-api-version IRONIC_API_VERSION</command></term>
    <listitem>
      <para>
      Accepts 1.x (where "x" is microversion) or "latest",
      Defaults to <code>env[IRONIC_API_VERSION]</code> or 1
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-service-type OS_SERVICE_TYPE</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_SERVICE_TYPE]</code> or "baremetal"
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-endpoint OS_ENDPOINT</command></term>
    <listitem>
      <para>
      Specify an endpoint to use instead of retrieving one
      from the service catalog (via authentication).
      Defaults to <code>env[OS_SERVICE_ENDPOINT]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-endpoint-type OS_ENDPOINT_TYPE</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_ENDPOINT_TYPE]</code> or "publicURL"
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--max-retries MAX_RETRIES</command></term>
    <listitem>
      <para>
      Maximum number of retries in case of conflict error
      (HTTP 409). Defaults to <code>env[IRONIC_MAX_RETRIES]</code> or 5.
      Use 0 to disable retrying.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--retry-interval RETRY_INTERVAL</command></term>
    <listitem>
      <para>
      Amount of time (in seconds) between retries in case of
      conflict error (HTTP 409). Defaults to
      <code>env[IRONIC_RETRY_INTERVAL]</code> or 2.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_chassis-create">
        <title>ironic chassis-create</title>
        <screen><computeroutput>usage: ironic chassis-create [-d &lt;description&gt;] [-e &lt;key=value&gt;]</computeroutput></screen>
        <para>
Create a new chassis.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-d &lt;description&gt;, --description &lt;description&gt;</command></term>
    <listitem>
      <para>
      Description of the chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-e &lt;key=value&gt;, --extra &lt;key=value&gt;</command></term>
    <listitem>
      <para>
      Record arbitrary key/value metadata. Can be specified
      multiple times.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_chassis-delete">
        <title>ironic chassis-delete</title>
        <screen><computeroutput>usage: ironic chassis-delete &lt;chassis&gt; [&lt;chassis&gt; ...]</computeroutput></screen>
        <para>
Delete a chassis.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;chassis&gt;</command></term>
    <listitem>
      <para>
        UUID of the chassis.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_chassis-list">
        <title>ironic chassis-list</title>
        <screen><computeroutput>usage: ironic chassis-list [--detail] [--limit &lt;limit&gt;] [--marker &lt;chassis&gt;]
                           [--sort-key &lt;field&gt;] [--sort-dir &lt;direction&gt;]
                           [--fields &lt;field&gt; [&lt;field&gt; ...]]</computeroutput></screen>
        <para>
List the chassis.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--detail</command></term>
    <listitem>
      <para>
        Show detailed information about the chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--limit &lt;limit&gt;</command></term>
    <listitem>
      <para>
        Maximum number of chassis to return per request, 0 for
      no limit. Default is the maximum number used by the
      Ironic API Service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--marker &lt;chassis&gt;</command></term>
    <listitem>
      <para>
        Chassis UUID (for example, of the last chassis in the
      list from a previous request). Returns the list of
      chassis after this UUID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-key &lt;field&gt;</command></term>
    <listitem>
      <para>
        Chassis field that will be used for sorting.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-dir &lt;direction&gt;</command></term>
    <listitem>
      <para>
      Sort direction: "asc" (the default) or "desc".
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more chassis fields. Only these fields will be
      fetched from the server. Can not be used when '--
      detail' is specified.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_chassis-node-list">
        <title>ironic chassis-node-list</title>
        <screen><computeroutput>usage: ironic chassis-node-list [--detail] [--limit &lt;limit&gt;] [--marker &lt;node&gt;]
                                [--sort-key &lt;field&gt;] [--sort-dir &lt;direction&gt;]
                                [--fields &lt;field&gt; [&lt;field&gt; ...]]
                                [--maintenance &lt;boolean&gt;]
                                [--associated &lt;boolean&gt;]
                                [--provision-state &lt;provision-state&gt;]
                                &lt;chassis&gt;</computeroutput></screen>
        <para>
List the nodes contained in a chassis.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;chassis&gt;</command></term>
    <listitem>
      <para>
        UUID of the chassis.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--detail</command></term>
    <listitem>
      <para>
        Show detailed information about the nodes.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--limit &lt;limit&gt;</command></term>
    <listitem>
      <para>
        Maximum number of nodes to return per request, 0 for
      no limit. Default is the maximum number used by the
      Ironic API Service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--marker &lt;node&gt;</command></term>
    <listitem>
      <para>
        Node UUID (for example, of the last node in the list
      from a previous request). Returns the list of nodes
      after this UUID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-key &lt;field&gt;</command></term>
    <listitem>
      <para>
        Node field that will be used for sorting.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-dir &lt;direction&gt;</command></term>
    <listitem>
      <para>
      Sort direction: "asc" (the default) or "desc".
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more node fields. Only these fields will be
      fetched from the server. Can not be used when '--
      detail' is specified.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--maintenance &lt;boolean&gt;</command></term>
    <listitem>
      <para>
      List nodes in maintenance mode: 'true' or 'false'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--associated &lt;boolean&gt;</command></term>
    <listitem>
      <para>
      List nodes by instance association: 'true' or 'false'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--provision-state &lt;provision-state&gt;</command></term>
    <listitem>
      <para>
      List nodes in specified provision state.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_chassis-show">
        <title>ironic chassis-show</title>
        <screen><computeroutput>usage: ironic chassis-show [--fields &lt;field&gt; [&lt;field&gt; ...]] &lt;chassis&gt;</computeroutput></screen>
        <para>
Show detailed information about a chassis.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;chassis&gt;</command></term>
    <listitem>
      <para>
        UUID of the chassis.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more chassis fields. Only these fields will be
      fetched from the server.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_chassis-update">
        <title>ironic chassis-update</title>
        <screen><computeroutput>usage: ironic chassis-update &lt;chassis&gt; &lt;op&gt; &lt;path=value&gt; [&lt;path=value&gt; ...]</computeroutput></screen>
        <para>
Update information about a chassis.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;chassis&gt;</command></term>
    <listitem>
      <para>
        UUID of the chassis.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;op&gt;</command></term>
    <listitem>
      <para>
        Operation: 'add', 'replace', or 'remove'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;path=value&gt;</command></term>
    <listitem>
      <para>
        Attribute to add, replace, or remove. Can be specified
      multiple times. For 'remove', only &lt;path&gt; is necessary.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_driver-get-vendor-passthru-methods">
        <title>ironic driver-get-vendor-passthru-methods</title>
        <screen><computeroutput>usage: ironic driver-get-vendor-passthru-methods &lt;driver&gt;</computeroutput></screen>
        <para>
Get the vendor passthru methods for a driver.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;driver&gt;</command></term>
    <listitem>
      <para>
        Name of the driver.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_driver-list">
        <title>ironic driver-list</title>
        <screen><computeroutput>usage: ironic driver-list</computeroutput></screen>
        <para>
List the enabled drivers.
        </para>
    </section>
    <section xml:id="ironicclient_subcommand_driver-properties">
        <title>ironic driver-properties</title>
        <screen><computeroutput>usage: ironic driver-properties &lt;driver&gt;</computeroutput></screen>
        <para>
Get properties of a driver.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;driver&gt;</command></term>
    <listitem>
      <para>
        Name of the driver.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_driver-show">
        <title>ironic driver-show</title>
        <screen><computeroutput>usage: ironic driver-show &lt;driver&gt;</computeroutput></screen>
        <para>
Show information about a driver.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;driver&gt;</command></term>
    <listitem>
      <para>
        Name of the driver.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_driver-vendor-passthru">
        <title>ironic driver-vendor-passthru</title>
        <screen><computeroutput>usage: ironic driver-vendor-passthru [--http-method &lt;http-method&gt;]
                                     &lt;driver&gt; &lt;method&gt;
                                     [&lt;arg=value&gt; [&lt;arg=value&gt; ...]]</computeroutput></screen>
        <para>
Call a vendor-passthru extension for a driver.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;driver&gt;</command></term>
    <listitem>
      <para>
        Name of the driver.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;method&gt;</command></term>
    <listitem>
      <para>
        Vendor-passthru method to be called.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;arg=value&gt;</command></term>
    <listitem>
      <para>
        Argument to be passed to the vendor-passthru method.
      Can be specified multiple times.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--http-method &lt;http-method&gt;</command></term>
    <listitem>
      <para>
      The HTTP method to use in the request. Valid HTTP
      methods are: 'POST', 'PUT', 'GET', 'DELETE', and
      'PATCH'. Defaults to 'POST'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-create">
        <title>ironic node-create</title>
        <screen><computeroutput>usage: ironic node-create [-c &lt;chassis&gt;] -d &lt;driver&gt; [-i &lt;key=value&gt;]
                          [-p &lt;key=value&gt;] [-e &lt;key=value&gt;] [-u &lt;uuid&gt;]
                          [-n &lt;name&gt;]</computeroutput></screen>
        <para>
Register a new node with the Ironic service.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-c &lt;chassis&gt;, --chassis &lt;chassis&gt;</command></term>
    <listitem>
      <para>
      UUID of the chassis that this node belongs to.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-d &lt;driver&gt;, --driver &lt;driver&gt;</command></term>
    <listitem>
      <para>
      Driver used to control the node [REQUIRED].
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-i &lt;key=value&gt;, --driver-info &lt;key=value&gt;</command></term>
    <listitem>
      <para>
      Key/value pair used by the driver, such as out-of-band
      management credentials. Can be specified multiple
      times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-p &lt;key=value&gt;, --properties &lt;key=value&gt;</command></term>
    <listitem>
      <para>
      Key/value pair describing the physical characteristics
      of the node. This is exported to Nova and used by the
      scheduler. Can be specified multiple times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-e &lt;key=value&gt;, --extra &lt;key=value&gt;</command></term>
    <listitem>
      <para>
      Record arbitrary key/value metadata. Can be specified
      multiple times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-u &lt;uuid&gt;, --uuid &lt;uuid&gt;</command></term>
    <listitem>
      <para>
      Unique UUID for the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-n &lt;name&gt;, --name &lt;name&gt;</command></term>
    <listitem>
      <para>
      Unique name for the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-delete">
        <title>ironic node-delete</title>
        <screen><computeroutput>usage: ironic node-delete &lt;node&gt; [&lt;node&gt; ...]</computeroutput></screen>
        <para>
Unregister a node from the Ironic service.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-get-boot-device">
        <title>ironic node-get-boot-device</title>
        <screen><computeroutput>usage: ironic node-get-boot-device &lt;node&gt;</computeroutput></screen>
        <para>
Get the current boot device for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-get-console">
        <title>ironic node-get-console</title>
        <screen><computeroutput>usage: ironic node-get-console &lt;node&gt;</computeroutput></screen>
        <para>
Get the connection information for a node's console, if enabled.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-get-supported-boot-devices">
        <title>ironic node-get-supported-boot-devices</title>
        <screen><computeroutput>usage: ironic node-get-supported-boot-devices &lt;node&gt;</computeroutput></screen>
        <para>
Get the supported boot devices for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-get-vendor-passthru-methods">
        <title>ironic node-get-vendor-passthru-methods</title>
        <screen><computeroutput>usage: ironic node-get-vendor-passthru-methods &lt;node&gt;</computeroutput></screen>
        <para>
Get the vendor passthru methods for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-list">
        <title>ironic node-list</title>
        <screen><computeroutput>usage: ironic node-list [--limit &lt;limit&gt;] [--marker &lt;node&gt;]
                        [--sort-key &lt;field&gt;] [--sort-dir &lt;direction&gt;]
                        [--maintenance &lt;boolean&gt;] [--associated &lt;boolean&gt;]
                        [--provision-state &lt;provision-state&gt;] [--detail]
                        [--fields &lt;field&gt; [&lt;field&gt; ...]]</computeroutput></screen>
        <para>
List the nodes which are registered with the Ironic service.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--limit &lt;limit&gt;</command></term>
    <listitem>
      <para>
        Maximum number of nodes to return per request, 0 for
      no limit. Default is the maximum number used by the
      Ironic API Service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--marker &lt;node&gt;</command></term>
    <listitem>
      <para>
        Node UUID (for example, of the last node in the list
      from a previous request). Returns the list of nodes
      after this UUID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-key &lt;field&gt;</command></term>
    <listitem>
      <para>
        Node field that will be used for sorting.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-dir &lt;direction&gt;</command></term>
    <listitem>
      <para>
      Sort direction: "asc" (the default) or "desc".
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--maintenance &lt;boolean&gt;</command></term>
    <listitem>
      <para>
      List nodes in maintenance mode: 'true' or 'false'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--associated &lt;boolean&gt;</command></term>
    <listitem>
      <para>
      List nodes by instance association: 'true' or 'false'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--provision-state &lt;provision-state&gt;</command></term>
    <listitem>
      <para>
      List nodes in specified provision state.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--detail</command></term>
    <listitem>
      <para>
        Show detailed information about the nodes.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more node fields. Only these fields will be
      fetched from the server. Can not be used when '--
      detail' is specified.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-port-list">
        <title>ironic node-port-list</title>
        <screen><computeroutput>usage: ironic node-port-list [--detail] [--limit &lt;limit&gt;] [--marker &lt;port&gt;]
                             [--sort-key &lt;field&gt;] [--sort-dir &lt;direction&gt;]
                             [--fields &lt;field&gt; [&lt;field&gt; ...]]
                             &lt;node&gt;</computeroutput></screen>
        <para>
List the ports associated with a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--detail</command></term>
    <listitem>
      <para>
        Show detailed information about the ports.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--limit &lt;limit&gt;</command></term>
    <listitem>
      <para>
        Maximum number of ports to return per request, 0 for
      no limit. Default is the maximum number used by the
      Ironic API Service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--marker &lt;port&gt;</command></term>
    <listitem>
      <para>
        Port UUID (for example, of the last port in the list
      from a previous request). Returns the list of ports
      after this UUID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-key &lt;field&gt;</command></term>
    <listitem>
      <para>
        Port field that will be used for sorting.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-dir &lt;direction&gt;</command></term>
    <listitem>
      <para>
      Sort direction: "asc" (the default) or "desc".
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more port fields. Only these fields will be
      fetched from the server. Can not be used when '--
      detail' is specified.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-set-boot-device">
        <title>ironic node-set-boot-device</title>
        <screen><computeroutput>usage: ironic node-set-boot-device [--persistent] &lt;node&gt; &lt;boot-device&gt;</computeroutput></screen>
        <para>
Set the boot device for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;boot-device&gt;</command></term>
    <listitem>
      <para>
        'pxe', 'disk', 'cdrom', 'bios', or 'safe'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--persistent</command></term>
    <listitem>
      <para>
        Make changes persistent for all future boots.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-set-console-mode">
        <title>ironic node-set-console-mode</title>
        <screen><computeroutput>usage: ironic node-set-console-mode &lt;node&gt; &lt;enabled&gt;</computeroutput></screen>
        <para>
Enable or disable serial console access for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;enabled&gt;</command></term>
    <listitem>
      <para>
        Enable or disable console access for a node: 'true' or 'false'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-set-maintenance">
        <title>ironic node-set-maintenance</title>
        <screen><computeroutput>usage: ironic node-set-maintenance [--reason &lt;reason&gt;]
                                   &lt;node&gt; &lt;maintenance-mode&gt;</computeroutput></screen>
        <para>
Enable or disable maintenance mode for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;maintenance-mode&gt;</command></term>
    <listitem>
      <para>
        'true' or 'false'; 'on' or 'off'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--reason &lt;reason&gt;</command></term>
    <listitem>
      <para>
        Reason for setting maintenance mode to 'true' or 'on';
      not valid when setting to 'false' or 'off'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-set-power-state">
        <title>ironic node-set-power-state</title>
        <screen><computeroutput>usage: ironic node-set-power-state &lt;node&gt; &lt;power-state&gt;</computeroutput></screen>
        <para>
Power a node on or off or reboot.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;power-state&gt;</command></term>
    <listitem>
      <para>
        'on', 'off', or 'reboot'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-set-provision-state">
        <title>ironic node-set-provision-state</title>
        <screen><computeroutput>usage: ironic node-set-provision-state [--config-drive &lt;config-drive&gt;]
                                       &lt;node&gt; &lt;provision-state&gt;</computeroutput></screen>
        <para>
Initiate a provisioning state change for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;provision-state&gt;</command></term>
    <listitem>
      <para>
        Supported states: 'active', 'deleted', 'rebuild',
      'inspect', 'provide', 'manage' or 'abort'
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--config-drive &lt;config-drive&gt;</command></term>
    <listitem>
      <para>
      A gzipped, base64-encoded configuration drive string
      OR the path to the configuration drive file OR the
      path to a directory containing the config drive files.
      In case it's a directory, a config drive will be
      generated from it. This parameter is only valid when
      setting provision state to 'active'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-show">
        <title>ironic node-show</title>
        <screen><computeroutput>usage: ironic node-show [--instance] [--fields &lt;field&gt; [&lt;field&gt; ...]] &lt;id&gt;</computeroutput></screen>
        <para>
Show detailed information about a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;id&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node (or instance UUID if
      --instance is specified).
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--instance &lt;id&gt;</command></term>
    <listitem>
      <para>
        is an instance UUID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more node fields. Only these fields will be
      fetched from the server.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-show-states">
        <title>ironic node-show-states</title>
        <screen><computeroutput>usage: ironic node-show-states &lt;node&gt;</computeroutput></screen>
        <para>
Show information about the node's states.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-update">
        <title>ironic node-update</title>
        <screen><computeroutput>usage: ironic node-update &lt;node&gt; &lt;op&gt; &lt;path=value&gt; [&lt;path=value&gt; ...]</computeroutput></screen>
        <para>
Update information about a registered node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;op&gt;</command></term>
    <listitem>
      <para>
        Operation: 'add', 'replace', or 'remove'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;path=value&gt;</command></term>
    <listitem>
      <para>
        Attribute to add, replace, or remove. Can be specified
      multiple times. For 'remove', only &lt;path&gt; is necessary.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-validate">
        <title>ironic node-validate</title>
        <screen><computeroutput>usage: ironic node-validate &lt;node&gt;</computeroutput></screen>
        <para>
Validate a node's driver interfaces.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_node-vendor-passthru">
        <title>ironic node-vendor-passthru</title>
        <screen><computeroutput>usage: ironic node-vendor-passthru [--http-method &lt;http-method&gt;]
                                   &lt;node&gt; &lt;method&gt;
                                   [&lt;arg=value&gt; [&lt;arg=value&gt; ...]]</computeroutput></screen>
        <para>
Call a vendor-passthru extension for a node.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;node&gt;</command></term>
    <listitem>
      <para>
        Name or UUID of the node.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;method&gt;</command></term>
    <listitem>
      <para>
        Vendor-passthru method to be called.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;arg=value&gt;</command></term>
    <listitem>
      <para>
        Argument to be passed to the vendor-passthru method.
      Can be specified multiple times.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--http-method &lt;http-method&gt;</command></term>
    <listitem>
      <para>
      The HTTP method to use in the request. Valid HTTP
      methods are: 'POST', 'PUT', 'GET', 'DELETE', and
      'PATCH'. Defaults to 'POST'.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_port-create">
        <title>ironic port-create</title>
        <screen><computeroutput>usage: ironic port-create -a &lt;address&gt; -n &lt;node&gt; [-e &lt;key=value&gt;]</computeroutput></screen>
        <para>
Create a new port.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-a &lt;address&gt;, --address &lt;address&gt;</command></term>
    <listitem>
      <para>
      MAC address for this port.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-n &lt;node&gt;, --node &lt;node&gt;, --node_uuid &lt;node&gt;</command></term>
    <listitem>
      <para>
      UUID of the node that this port belongs to.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-e &lt;key=value&gt;, --extra &lt;key=value&gt;</command></term>
    <listitem>
      <para>
      Record arbitrary key/value metadata. Can be specified
      multiple times.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_port-delete">
        <title>ironic port-delete</title>
        <screen><computeroutput>usage: ironic port-delete &lt;port&gt; [&lt;port&gt; ...]</computeroutput></screen>
        <para>
Delete a port.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;port&gt;</command></term>
    <listitem>
      <para>
        UUID of the port.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_port-list">
        <title>ironic port-list</title>
        <screen><computeroutput>usage: ironic port-list [--detail] [--address &lt;mac-address&gt;] [--limit &lt;limit&gt;]
                        [--marker &lt;port&gt;] [--sort-key &lt;field&gt;]
                        [--sort-dir &lt;direction&gt;]
                        [--fields &lt;field&gt; [&lt;field&gt; ...]]</computeroutput></screen>
        <para>
List the ports.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--detail</command></term>
    <listitem>
      <para>
        Show detailed information about ports.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--address &lt;mac-address&gt;</command></term>
    <listitem>
      <para>
      Only show information for the port with this MAC
      address.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--limit &lt;limit&gt;</command></term>
    <listitem>
      <para>
        Maximum number of ports to return per request, 0 for
      no limit. Default is the maximum number used by the
      Ironic API Service.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--marker &lt;port&gt;</command></term>
    <listitem>
      <para>
        Port UUID (for example, of the last port in the list
      from a previous request). Returns the list of ports
      after this UUID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-key &lt;field&gt;</command></term>
    <listitem>
      <para>
        Port field that will be used for sorting.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--sort-dir &lt;direction&gt;</command></term>
    <listitem>
      <para>
      Sort direction: "asc" (the default) or "desc".
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more port fields. Only these fields will be
      fetched from the server. Can not be used when '--
      detail' is specified.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_port-show">
        <title>ironic port-show</title>
        <screen><computeroutput>usage: ironic port-show [--address] [--fields &lt;field&gt; [&lt;field&gt; ...]] &lt;id&gt;</computeroutput></screen>
        <para>
Show detailed information about a port.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;id&gt;</command></term>
    <listitem>
      <para>
        UUID of the port (or MAC address if --address is
      specified).
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--address &lt;id&gt;</command></term>
    <listitem>
      <para>
        is the MAC address (instead of the UUID) of the
      port.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--fields &lt;field&gt; [&lt;field&gt; ...]</command></term>
    <listitem>
      <para>
      One or more port fields. Only these fields will be
      fetched from the server.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="ironicclient_subcommand_port-update">
        <title>ironic port-update</title>
        <screen><computeroutput>usage: ironic port-update &lt;port&gt; &lt;op&gt; &lt;path=value&gt; [&lt;path=value&gt; ...]</computeroutput></screen>
        <para>
Update information about a port.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;port&gt;</command></term>
    <listitem>
      <para>
        UUID of the port.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;op&gt;</command></term>
    <listitem>
      <para>
        Operation: 'add', 'replace', or 'remove'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;path=value&gt;</command></term>
    <listitem>
      <para>
        Attribute to add, replace, or remove. Can be specified
      multiple times. For 'remove', only &lt;path&gt; is necessary.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
</chapter>
