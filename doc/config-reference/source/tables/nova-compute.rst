..
    Warning: Do not edit this file. It is automatically generated from the
    software project's code and your changes will be overwritten.

    The tool to generate this file lives in openstack-doc-tools repository.

    Please make any changes needed in the code, then run the
    autogenerate-config-doc tool from the openstack-doc-tools repository, or
    ask for help on the documentation mailing list, IRC channel or meeting.

.. _nova-compute:

.. list-table:: Description of Compute configuration options
   :header-rows: 1
   :class: config-ref-table

   * - Configuration option = Default value
     - Description
   * - **[DEFAULT]**
     -
   * - ``compute_available_monitors`` = ``None``
     - (Multi-valued) DEPRECATED: Monitor classes available to the compute which may be specified more than once. This option is DEPRECATED and no longer used. Use setuptools entry points to list available monitor plugins. stevedore and setuptools entry points now allow a set of plugins to be specified without this config option.
   * - ``compute_driver`` = ``None``
     - (String) Defines which driver to use for controlling virtualization.

       Possible values:

       * ``libvirt.LibvirtDriver``

       * ``xenapi.XenAPIDriver``

       * ``fake.FakeDriver``

       * ``ironic.IronicDriver``

       * ``vmwareapi.VMwareVCDriver``

       * ``hyperv.HyperVDriver``
   * - ``compute_manager`` = ``nova.compute.manager.ComputeManager``
     - (String) DEPRECATED: Full class name for the Manager for compute
   * - ``compute_monitors`` =
     - (List) A list of monitors that can be used for getting compute metrics. You can use the alias/name from the setuptools entry points for nova.compute.monitors.* namespaces. If no namespace is supplied, the "cpu." namespace is assumed for backwards-compatibility.

       Possible values:

       * An empty list will disable the feature(Default).

       * An example value that would enable both the CPU and NUMA memory bandwidth monitors that used the virt driver variant: ["cpu.virt_driver", "numa_mem_bw.virt_driver"]
   * - ``compute_stats_class`` = ``nova.compute.stats.Stats``
     - (String) DEPRECATED: Abstracts out managing compute host stats to pluggable class. This class manages and updates stats for the local compute host after an instance is changed. These configurable compute stats may be useful for a particular scheduler implementation.

       Possible values

        * A string representing fully qualified class name.
   * - ``console_host`` = ``socket.gethostname()``
     - (String) Console proxy host to be used to connect to instances on this host. It is the publicly visible name for the console host.

       Possible values:

       * Current hostname (default) or any string representing hostname.
   * - ``console_manager`` = ``nova.console.manager.ConsoleProxyManager``
     - (String) DEPRECATED: Full class name for the Manager for console proxy
   * - ``default_flavor`` = ``m1.small``
     - (String) DEPRECATED: Default flavor to use for the EC2 API only. The Nova API does not support a default flavor. The EC2 API is deprecated
   * - ``default_notification_level`` = ``INFO``
     - (String) Default notification level for outgoing notifications.
   * - ``enable_instance_password`` = ``True``
     - (Boolean) Enables returning of the instance password by the relevant server API calls such as create, rebuild, evacuate, or rescue. If the hypervisor does not support password injection, then the password returned will not be correct, so if your hypervisor does not support password injection, set this to False.
   * - ``heal_instance_info_cache_interval`` = ``60``
     - (Integer) Number of seconds between instance network information cache updates
   * - ``image_cache_manager_interval`` = ``2400``
     - (Integer) Number of seconds to wait between runs of the image cache manager. Set to -1 to disable. Setting this to 0 will run at the default rate.
   * - ``image_cache_subdirectory_name`` = ``_base``
     - (String) Where cached images are stored under $instances_path. This is NOT the full path - just a folder name. For per-compute-host cached images, set to _base_$my_ip
   * - ``instance_build_timeout`` = ``0``
     - (Integer) Maximum time in seconds that an instance can take to build.

       If this timer expires, instance status will be changed to ERROR. Enabling this option will make sure an instance will not be stuck in BUILD state for a longer period.

       Possible values:

       * 0: Disables the option (default)

       * Any positive integer in seconds: Enables the option.
   * - ``instance_delete_interval`` = ``300``
     - (Integer) Interval in seconds for retrying failed instance file deletes. Set to -1 to disable. Setting this to 0 will run at the default rate.
   * - ``instance_usage_audit`` = ``False``
     - (Boolean) This option enables periodic compute.instance.exists notifications. Each compute node must be configured to generate system usage data. These notifications are consumed by OpenStack Telemetry service.
   * - ``instance_usage_audit_period`` = ``month``
     - (String) Time period to generate instance usages for. It is possible to define optional offset to given period by appending @ character followed by a number defining offset.

       Possible values: * period, example: ``hour``, ``day``, ``month` or ``year`` * period with offset, example: ``month@15`` will result in monthly audits starting on 15th day of month.
   * - ``instances_path`` = ``$state_path/instances``
     - (String) Specifies where instances are stored on the hypervisor's disk. It can point to locally attached storage or a directory on NFS.

       Possible values:

       * $state_path/instances where state_path is a config option that specifies the top-level directory for maintaining nova's state. (default) or Any string representing directory path.
   * - ``max_concurrent_builds`` = ``10``
     - (Integer) Limits the maximum number of instance builds to run concurrently by nova-compute. Compute service can attempt to build an infinite number of instances, if asked to do so. This limit is enforced to avoid building unlimited instance concurrently on a compute node. This value can be set per compute node.

       Possible Values:

       * 0 : treated as unlimited.

       * Any positive integer representing maximum concurrent builds.
   * - ``maximum_instance_delete_attempts`` = ``5``
     - (Integer) The number of times to attempt to reap an instance's files.
   * - ``reboot_timeout`` = ``0``
     - (Integer) Time interval after which an instance is hard rebooted automatically.

       When doing a soft reboot, it is possible that a guest kernel is completely hung in a way that causes the soft reboot task to not ever finish. Setting this option to a time period in seconds will automatically hard reboot an instance if it has been stuck in a rebooting state longer than N seconds.

       Possible values:

       * 0: Disables the option (default).

       * Any positive integer in seconds: Enables the option.
   * - ``reclaim_instance_interval`` = ``0``
     - (Integer) Interval in seconds for reclaiming deleted instances. It takes effect only when value is greater than 0.
   * - ``rescue_timeout`` = ``0``
     - (Integer) Interval to wait before un-rescuing an instance stuck in RESCUE.

       Possible values:

       * 0: Disables the option (default)

       * Any positive integer in seconds: Enables the option.
   * - ``resize_confirm_window`` = ``0``
     - (Integer) Automatically confirm resizes after N seconds.

       Resize functionality will save the existing server before resizing. After the resize completes, user is requested to confirm the resize. The user has the opportunity to either confirm or revert all changes. Confirm resize removes the original server and changes server status from resized to active. Setting this option to a time period (in seconds) will automatically confirm the resize if the server is in resized state longer than that time.

       Possible values:

       * 0: Disables the option (default)

       * Any positive integer in seconds: Enables the option.
   * - ``resume_guests_state_on_host_boot`` = ``False``
     - (Boolean) This option specifies whether to start guests that were running before the host rebooted. It ensures that all of the instances on a Nova compute node resume their state each time the compute node boots or restarts.
   * - ``running_deleted_instance_action`` = ``reap``
     - (String) The compute service periodically checks for instances that have been deleted in the database but remain running on the compute node. The above option enables action to be taken when such instances are identified.

       Possible values:

       * reap: Powers down the instances and deletes them(default)

       * log: Logs warning message about deletion of the resource

       * shutdown: Powers down instances and marks them as non- bootable which can be later used for debugging/analysis

       * noop: Takes no action

       Related options:

       * running_deleted_instance_poll

       * running_deleted_instance_timeout
   * - ``running_deleted_instance_poll_interval`` = ``1800``
     - (Integer) Time interval in seconds to wait between runs for the clean up action. If set to 0, above check will be disabled. If "running_deleted_instance _action" is set to "log" or "reap", a value greater than 0 must be set.

       Possible values:

       * Any positive integer in seconds enables the option.

       * 0: Disables the option.

       * 1800: Default value.

       Related options:

       * running_deleted_instance_action
   * - ``running_deleted_instance_timeout`` = ``0``
     - (Integer) Time interval in seconds to wait for the instances that have been marked as deleted in database to be eligible for cleanup.

       Possible values:

       * Any positive integer in seconds(default is 0).

       Related options:

       * "running_deleted_instance_action"
   * - ``shelved_offload_time`` = ``0``
     - (Integer) Time in seconds before a shelved instance is eligible for removing from a host. -1 never offload, 0 offload immediately when shelved
   * - ``shelved_poll_interval`` = ``3600``
     - (Integer) Interval in seconds for polling shelved instances to offload. Set to -1 to disable.Setting this to 0 will run at the default rate.
   * - ``shutdown_timeout`` = ``60``
     - (Integer) Total time to wait in seconds for an instance toperform a clean shutdown.

       It determines the overall period (in seconds) a VM is allowed to perform a clean shutdown. While performing stop, rescue and shelve, rebuild operations, configuring this option gives the VM a chance to perform a controlled shutdown before the instance is powered off. The default timeout is 60 seconds.

       The timeout value can be overridden on a per image basis by means of os_shutdown_timeout that is an image metadata setting allowing different types of operating systems to specify how much time they need to shut down cleanly.

       Possible values:

       * Any positive integer in seconds (default value is 60).
   * - ``sync_power_state_interval`` = ``600``
     - (Integer) Interval to sync power states between the database and the hypervisor. Set to -1 to disable. Setting this to 0 will run at the default rate.
   * - ``sync_power_state_pool_size`` = ``1000``
     - (Integer) Number of greenthreads available for use to sync power states.

       This option can be used to reduce the number of concurrent requests made to the hypervisor or system with real instance power states for performance reasons, for example, with Ironic.

       Possible values:

       * Any positive integer representing greenthreads count.
   * - ``update_resources_interval`` = ``0``
     - (Integer) Interval in seconds for updating compute resources. A number less than 0 means to disable the task completely. Leaving this at the default of 0 will cause this to run at the default periodic interval. Setting it to any positive value will cause it to run at approximately that number of seconds.
   * - ``vif_plugging_is_fatal`` = ``True``
     - (Boolean) Determine if instance should boot or fail on VIF plugging timeout.

       Nova sends a port update to Neutron after an instance has been scheduled, providing Neutron with the necessary information to finish setup of the port. Once completed, Neutron notifies Nova that it has finished setting up the port, at which point Nova resumes the boot of the instance since network connectivity is now supposed to be present. A timeout will occur if the reply is not received after a given interval.

       This option determines what Nova does when the VIF plugging timeout event happens. When enabled, the instance will error out. When disabled, the instance will continue to boot on the assumption that the port is ready.

       Possible values:

       * True: Instances should fail after VIF plugging timeout

       * False: Instances should continue booting after VIF plugging timeout
   * - ``vif_plugging_timeout`` = ``300``
     - (Integer) Timeout for Neutron VIF plugging event message arrival.

       Number of seconds to wait for Neutron vif plugging events to arrive before continuing or failing (see 'vif_plugging_is_fatal').

       Interdependencies to other options:

       * vif_plugging_is_fatal - If ``vif_plugging_timeout`` is set to zero and ``vif_plugging_is_fatal`` is False, events should not be expected to arrive at all.
